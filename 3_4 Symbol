/*
 심볼(Symbol)

-property key : 문자형
const obj = {
    1: '1입니다.',
    false: '거짓'
}

Object.keys(obj); // ["1", "false"]

obj['1'] // "1입니다."
obj['false'] //"거짓"

-Symbol (유일한 식별자)
const a = Symbol(); //new를 붙이지 않습니다!
const b = Symbol();

console.log(a) // Symbol()
console.log(b) // Symbol()
==> a === b; // false , a == b; // false

-property key : 심볼형
const id = Symbol('id');
const user = {
    name : 'Mike',
    age : 30,
    [id] : 'myid'
}

user // {name: "Mike", age: 30, Symbol(id): "myid"}
user[id] // "myid"

Object.~~ 는 심볼형 안나옴

-Symbol.for(): 전역 심볼
 * 하나의 심볼만 보장 받을 수 있음
 * 없으면 만들고, 있으면 가져오기 때문
 * Symbol 함수는 매번 다른 Symbol 값을 생성하지만,
 * Symbol.for 메소드는 하나를 생성한 뒤 키를 통해 같은 Symbol을 공유
const id1 = Symbol.for('id');
const id2 = Symbol.for('id');
id1 === id2; //true

-description
const id = Symbol('id 입니다.');
id.description; // "id 입니다."

-숨겨진 Symbol key 보는 법
const id Symbol('id');
const user = {
    name : 'Mike',
    age : 30,
    [id]: 'myid'
};

Object.getOwnPropertySymbols(user); // [Symbol(id)]
Reflect.ownKeys(user); //["name","age",Symbol(id)]

// 다른 개발자가 만들어 놓은 객체
const user = {
    name : 'Mike',
    age : 30,
};

// 내가 작업
const showName = Symbol("show name");
user[showName] = function () {
    console.log(this.name);
}

user.[showName](); // Mike

//사용자가 접속하면 보는 메세지
for (let key in user){
    console.log(`His ${key} is ${user[key]}.`)
}
*/
